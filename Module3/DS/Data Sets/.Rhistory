source("C:/Users/LENOVO/Downloads/heart disease prediction/heart/heart.R", echo=TRUE)
source("C:/Users/LENOVO/Downloads/heart disease prediction/heart/heart.R", echo=TRUE)
source("C:/Users/LENOVO/Downloads/heart disease prediction/heart/heart.R", echo=TRUE)
setwd("C:/Users/LENOVO/Github/VIT-College/Module3/DS/Data Sets")
df<-read.csv("Expt 5-Data Set_knn1_csv.csv")
View(df)
#calculate distance of P=(3,2) from all the points in df
df$eucld_dist<-sqrt((df$x-3)**2+(df$y-2)**2)
View(df)
#
order(df$eucld_dist) #returns row indices of data sorted in ascending order
sorted_data<-df[order(df$eucld_dist),]
View(sorted_data)
# NN
cat("The class of P for NN is:",sorted_data$class[1])
# KNN
k=as.integer(readline(prompt="Enter the value of k:"))
View(k_neighbours)
majority_class<-table(k_neighbours$class)
df<-read.csv("Expt 5-Data Set_knn1_csv.csv")
View(df)
#calculate distance of P=(3,2) from all the points in df
df$eucld_dist<-sqrt((df$x-3)**2+(df$y-2)**2)
View(df)
#
order(df$eucld_dist) #returns row indices of data sorted in ascending order
sorted_data<-df[order(df$eucld_dist),]
View(sorted_data)
# NN
cat("The class of P for NN is:",sorted_data$class[1])
# KNN
k=as.integer(readline(prompt="Enter the value of k:"))
View(k_neighbours)
majority_class<-table(k_neighbours$class)
df<-read.csv("Expt 5-Data Set_knn1_csv.csv")
View(df)
#calculate distance of P=(3,2) from all the points in df
df$eucld_dist<-sqrt((df$x-3)**2+(df$y-2)**2)
View(df)
#
order(df$eucld_dist) #returns row indices of data sorted in ascending order
sorted_data<-df[order(df$eucld_dist),]
View(sorted_data)
# NN
cat("The class of P for NN is:",sorted_data$class[1])
# KNN
k=as.integer(readline(prompt="Enter the value of k:"))
View(k_neighbours)
majority_class<-table(k_neighbours$class)
#rnn
r=1.45
r_neighbours<-df[df$eucld_dist<r,]
View(r_neighbours)
t<-table(r_neighbours$class)
rnn_class<-names(which.max(t))
cat("The class of P for rnn is:",rnn_class)
k_neighbours$weight=(k_neighbours$eucld_dist[k]-k_neighbours$eucld_dist)/(k_neighbours$eucld_dist[k]-k_neighbours$eucld_dist[1])
df<-read.csv("Expt 5-Data Set_knn1_csv.csv")
View(df)
#calculate distance of P=(3,2) from all the points in df
df$eucld_dist<-sqrt((df$x-3)**2+(df$y-2)**2)
View(df)
#
order(df$eucld_dist) #returns row indices of data sorted in ascending order
sorted_data<-df[order(df$eucld_dist),]
View(sorted_data)
# NN
cat("The class of P for NN is:",sorted_data$class[1])
# KNN
k=as.integer(readline(prompt=10))
View(k_neighbours)
majority_class<-table(k_neighbours$class)
k=as.integer(readline(prompt=10))
df<-read.csv("Expt 5-Data Set_knn1_csv.csv")
View(df)
#calculate distance of P=(3,2) from all the points in df
df$eucld_dist<-sqrt((df$x-3)**2+(df$y-2)**2)
View(df)
#
order(df$eucld_dist) #returns row indices of data sorted in ascending order
sorted_data<-df[order(df$eucld_dist),]
View(sorted_data)
# NN
cat("The class of P for NN is:",sorted_data$class[1])
# KNN
k=as.integer(readline(prompt="Enter the value of k:"))
k_neighbours<-sorted_data[1:k,]
k=as.integer(readline(prompt="Enter the value of k:"))
k=readline(prompt="Enter the value of k:");
print(k)
k<-readline(prompt="Enter the value of k:");
print(k)
k<-readline(prompt = "Enter the value of k:");
print(k)
k<-readline(prompt = "Enter the value of k: ");
print(k)
# KNN
k=as.integer(readline(prompt="Enter the value of k:"))
k <- as.integer(readline(prompt="Enter the value of k:"))
k <- as.integer(readline(prompt="Enter the value of k:"))
k <- 5
k_neighbours<-sorted_data[1:k,]
View(k_neighbours)
majority_class<-table(k_neighbours$class)
majority_class
knn_class<-names(which.max(majority_class))
cat("The class of P for kNN is:",knn_class)
df<-read.csv("Expt 5-Data Set_knn1_csv.csv")
View(df)
#calculate distance of P=(3,2) from all the points in df
df$eucld_dist<-sqrt((df$x-3)**2+(df$y-2)**2)
View(df)
#
order(df$eucld_dist) #returns row indices of data sorted in ascending order
sorted_data<-df[order(df$eucld_dist),]
View(sorted_data)
# NN
cat("The class of P for NN is:",sorted_data$class[1])
# KNN
k <- 5
k_neighbours<-sorted_data[1:k,]
View(k_neighbours)
majority_class<-table(k_neighbours$class)
majority_class
knn_class<-names(which.max(majority_class))
cat("The class of P for kNN is:",knn_class)
#mknn
k_neighbours$weight=(k_neighbours$eucld_dist[k]-k_neighbours$eucld_dist)/(k_neighbours$eucld_dist[k]-k_neighbours$eucld_dist[1])
View(k_neighbours)
#install.packages("dplyr")
library(dplyr)
df1<-k_neighbours%>%group_by(class)%>%summarise(class_sum=sum(weight))
df1
mknn_class<-df1$class[which.max(df1$class_sum)]
cat("The class of P for mknn is:",mknn_class)
#rnn
r=1.45
r_neighbours<-df[df$eucld_dist<r,]
View(r_neighbours)
t<-table(r_neighbours$class)
rnn_class<-names(which.max(t))
cat("The class of P for rnn is:",rnn_class)
source("C:/Users/LENOVO/Github/VIT-College/Module3/DS/knn_program.R", echo=TRUE)
library(class)
f1<- read.csv("Expt 6- Dataset_wisconsinn breast cancerdata_csv.csv")
f1
#shuffling the data----
f1$diagnosis<- as.factor(f1$diagnosis)
set.seed(123)
rows<-sample(nrow(f1))
f1<-f1[rows,]
f1_new <- f1[,3:32]
#Normalization for scaling the data between 0 to 1----
n<- function(b){
(b- min(b))/(max(b)- min(b))
}
f1_nor<- as.data.frame(lapply(f1_new, n))
#splitting data into train and test----
f1_train<- f1_nor[1:469,]
f1_test<- f1_nor[470:569,]
# knn(train data without label , test data without label , train label,k)-
---
train_label<- f1[1:469,2]
library(class)
f1<- read.csv("Expt 6- Dataset_wisconsinn breast cancerdata_csv.csv")
view(f1)
library(class)
f1<- read.csv("Expt 6- Dataset_wisconsinn breast cancerdata_csv.csv")
View(f1)
#shuffling the data----
f1$diagnosis<- as.factor(f1$diagnosis)
set.seed(123)
rows<-sample(nrow(f1))
f1<-f1[rows,]
f1_new <- f1[,3:32]
#Normalization for scaling the data between 0 to 1----
n<- function(b){
(b- min(b))/(max(b)- min(b))
}
f1_nor<- as.data.frame(lapply(f1_new, n))
#splitting data into train and test----
f1_train<- f1_nor[1:469,]
f1_test<- f1_nor[470:569,]
# knn(train data without label , test data without label , train label,k)-
---
train_label<- f1[1:469,2]
library(class)
f1<- read.csv("Expt 6- Dataset_wisconsinn breast cancerdata_csv.csv")
View(f1)
#shuffling the data----
f1$diagnosis<- as.factor(f1$diagnosis)
set.seed(123)
rows<-sample(nrow(f1))
f1<-f1[rows,]
f1_new <- f1[,3:32]
#Normalization for scaling the data between 0 to 1----
n<- function(b){
(b- min(b))/(max(b)- min(b))
}
f1_nor<- as.data.frame(lapply(f1_new, n))
#splitting data into train and test----
f1_train<- f1_nor[1:469,]
f1_test<- f1_nor[470:569,]
# knn(train data without label , test data without label , train label,k)-
train_label<- f1[1:469,2]
test_label<- f1[470:569,2]
k1<- knn(f1_train,f1_test,train_label,7)
t<- table(actual=test_label,predicted=k1)
print(t)
acc<- sum(diag(t)/sum(t))
cat("\n Accuracy is : ",acc)
sen<- t[2,2]/sum(t[2,])
cat("\n Sensitivity is : ",sen)
spe<- t[1,1]/sum(t[1,])
cat("\n Specificty is : ",spe)
pre<- t[2,2]/sum(t[,2])
cat("\n Precision is : ",pre)
df<-read.csv("Expt 5-Data Set_knn1_csv.csv")
View(df)
#calculate distance of P=(3,2) from all the points in df
df$eucld_dist<-sqrt((df$x-3)**2+(df$y-2)**2)
View(df)
#
order(df$eucld_dist) #returns row indices of data sorted in ascending order
sorted_data<-df[order(df$eucld_dist),]
View(sorted_data)
# NN
cat("The class of P for NN is:",sorted_data$class[1])
# KNN
k <- 5
k_neighbours<-sorted_data[1:k,]
View(k_neighbours)
majority_class<-table(k_neighbours$class)
majority_class
knn_class<-names(which.max(majority_class))
cat("The class of P for kNN with k=5:",knn_class)
k <- 7
k_neighbours<-sorted_data[1:k,]
View(k_neighbours)
majority_class<-table(k_neighbours$class)
majority_class
knn_class<-names(which.max(majority_class))
cat("The class of P for kNN with k=7:",knn_class)
k <- 5
#mknn
k_neighbours$weight=(k_neighbours$eucld_dist[k]-k_neighbours$eucld_dist)/(k_neighbours$eucld_dist[k]-k_neighbours$eucld_dist[1])
View(k_neighbours)
#install.packages("dplyr")
library(dplyr)
df1<-k_neighbours%>%group_by(class)%>%summarise(class_sum=sum(weight))
df1
mknn_class<-df1$class[which.max(df1$class_sum)]
cat("The class of P for mknn is:",mknn_class)
#rnn
r=1.45
r_neighbours<-df[df$eucld_dist<r,]
View(r_neighbours)
t<-table(r_neighbours$class)
rnn_class<-names(which.max(t))
cat("The class of P for rnn is:",rnn_class)
df<-read.csv("Expt 5-Data Set_knn1_csv.csv")
View(df)
#calculate distance of P=(3,2) from all the points in df
df$eucld_dist<-sqrt((df$x-3)**2+(df$y-2)**2)
View(df)
#
order(df$eucld_dist) #returns row indices of data sorted in ascending order
sorted_data<-df[order(df$eucld_dist),]
View(sorted_data)
# NN
cat("The class of P for NN is:",sorted_data$class[1])
# KNN
k <- 5
k_neighbours<-sorted_data[1:k,]
View(k_neighbours)
majority_class<-table(k_neighbours$class)
majority_class
knn_class<-names(which.max(majority_class))
cat("The class of P for kNN with K=5:",knn_class)
k <- 7
k_neighbours<-sorted_data[1:k,]
View(k_neighbours)
majority_class<-table(k_neighbours$class)
majority_class
knn_class<-names(which.max(majority_class))
cat("The class of P for kNN with K=7:",knn_class)
k <- 5
k_neighbours$weight=(k_neighbours$eucld_dist[k]-k_neighbours$eucld_dist)/(k_neighbours$eucld_dist[k]-k_neighbours$eucld_dist[1])
View(k_neighbours)
#install.packages("dplyr")
library(dplyr)
df1<-k_neighbours%>%group_by(class)%>%summarise(class_sum=sum(weight))
df1
mknn_class<-df1$class[which.max(df1$class_sum)]
cat("The class of P for mknn is:",mknn_class)
#rnn
r=1.45
r_neighbours<-df[df$eucld_dist<r,]
View(r_neighbours)
t<-table(r_neighbours$class)
rnn_class<-names(which.max(t))
cat("The class of P for rnn is:",rnn_class)
library(class)
f1<- read.csv("Expt 6- Dataset_wisconsinn breast cancerdata_csv.csv")
View(f1)
#shuffling the data----
f1$diagnosis<- as.factor(f1$diagnosis)
set.seed(123)
rows<-sample(nrow(f1))
f1<-f1[rows,]
f1_new <- f1[,3:32]
#Normalization for scaling the data between 0 to 1----
n<- function(b){
(b- min(b))/(max(b)- min(b))
}
f1_nor<- as.data.frame(lapply(f1_new, n))
#splitting data into train and test----
f1_train<- f1_nor[1:469,]23
library(class)
f1<- read.csv("Expt 6- Dataset_wisconsinn breast cancerdata_csv.csv")
View(f1)
#shuffling the data----
f1$diagnosis<- as.factor(f1$diagnosis)
set.seed(123)
rows<-sample(nrow(f1))
f1<-f1[rows,]
f1_new <- f1[,3:32]
#Normalization for scaling the data between 0 to 1----
n<- function(b){
(b- min(b))/(max(b)- min(b))
}
f1_nor<- as.data.frame(lapply(f1_new, n))
#splitting data into train and test----
f1_train<- f1_nor[1:469,]23
library(class)
f1<- read.csv("Expt 6- Dataset_wisconsinn breast cancerdata_csv.csv")
View(f1)
#shuffling the data----
f1$diagnosis<- as.factor(f1$diagnosis)
set.seed(123)
rows<-sample(nrow(f1))
f1<-f1[rows,]
f1_new <- f1[,3:32]
#Normalization for scaling the data between 0 to 1----
n<- function(b){
(b- min(b))/(max(b)- min(b))
}
f1_nor<- as.data.frame(lapply(f1_new, n))
#splitting data into train and test----
f1_train<- f1_nor[1:469,]
f1_test<- f1_nor[470:569,]
# knn(train data without label , test data without label , train label,k)-
train_label<- f1[1:469,2]
test_label<- f1[470:569,2]
k1<- knn(f1_train,f1_test,train_label,7)
t<- table(actual=test_label,predicted=k1)
print(t)
acc<- sum(diag(t)/sum(t))
cat("\n Accuracy is : ",acc)
sen<- t[2,2]/sum(t[2,])
cat("\n Sensitivity is : ",sen)
spe<- t[1,1]/sum(t[1,])
cat("\n Specificty is : ",spe)
pre<- t[2,2]/sum(t[,2])
cat("\n Precision is : ",pre)
t<- table(actual=test_label,predicted=k1)
library(class)
f1<- read.csv("Expt 6- Dataset_wisconsinn breast cancerdata_csv.csv")
View(f1)
#shuffling the data----
f1$diagnosis<- as.factor(f1$diagnosis)
set.seed(123)
rows<-sample(nrow(f1))
f1<-f1[rows,]
f1_new <- f1[,3:32]
#Normalization for scaling the data between 0 to 1----
n<- function(b){
(b- min(b))/(max(b)- min(b))
}
f1_nor<- as.data.frame(lapply(f1_new, n))
#splitting data into train and test----
f1_train<- f1_nor[1:469,]
f1_test<- f1_nor[470:569,]
# knn(train data without label , test data without label , train label,k)-
train_label<- f1[1:469,2]
test_label<- f1[470:569,2]
k1<- knn(f1_train,f1_test,train_label,7)
t<- table(actual=test_label,predicted=k1)
print(t)
acc<- sum(diag(t)/sum(t))
cat("\n Accuracy is : ",acc)
sen<- t[2,2]/sum(t[2,])
cat("\n Sensitivity is : ",sen)
spe<- t[1,1]/sum(t[1,])
cat("\n Specificty is : ",spe)
pre<- t[2,2]/sum(t[,2])
cat("\n Precision is : ",pre)
